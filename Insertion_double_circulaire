#include <stdio.h>
#include <stdlib.h>
/*-------déclaration d'une Dlist-----------------------*/
typedef struct node{
    int val;
   struct node *suiv;
   struct node *prec;
} node;

typedef node * Dlist;

typedef enum Test {
    FAUX, 
    VRAI
}test;
/*---------prototype de fonction ---------------------*/
Dlist creation_Dlist_circulaire(int);
Dlist insert_Head(Dlist, int);
Dlist insert_last(Dlist, int);
/*-----------------------------------------------------*/
test est_vide ( Dlist );
void test_allocation( Dlist);
void Menu ( Dlist *);
/*------------------------------------------------------*/
int main () {
    Dlist Dl = NULL;
    Menu(&Dl);
    return 0;
}
/*-----------------------------------------------------*/
test est_vide ( Dlist Dl ){
   if ( Dl == NULL ) {
       printf(" liste vide \n");
       return VRAI ;
   }
   return FAUX;
}

void test_allocation( Dlist Dl) {
    if ( Dl == NULL ) {
        printf("échec de l'allocation de mémoire ");
        exit ( EXIT_FAILURE ) ;
    } 
}

void afficher_liste(Dlist Dl) {
    if (Dl == NULL) {
        printf("Liste vide !\n");
        return;
    }

    Dlist temp = Dl;
    do {
        printf("%d -> ", temp->val);
        temp = temp->suiv;
    } while (temp != Dl);
    printf("(retour au début)\n");
}
/*===================================================*/

Dlist creation_Dlist_circulaire(int Val) {
    Dlist Dl = (Dlist) malloc (sizeof(node));
    test_allocation (Dl);
    Dl-> val = Val;
    Dl -> suiv = Dl;
    Dl -> prec = Dl;
    return Dl;
}

Dlist insert_Head(Dlist Dl, int val) {
    Dlist liste = creation_Dlist_circulaire(val);
    if (Dl == NULL) {
        Dl = liste;
    } else {
        liste->suiv = Dl;
        liste->prec = Dl->prec;
        Dl->prec->suiv = liste;
        Dl->prec = liste;
        Dl = liste;
    }
    return Dl;
}

Dlist insert_last(Dlist Dl, int val) {
    Dlist liste = creation_Dlist_circulaire(val);
    if (Dl == NULL) {
        Dl = liste;
    } else {
        liste->suiv = Dl;
        liste->prec = Dl->prec;
        Dl->prec->suiv = liste;
        Dl->prec = liste;
    }
    return Dl;
} 
  
void Menu(Dlist *Dl) {
    int choix, val;
    do {
        printf("========================================\n");
        printf("         Menu de gestion              \n");
        printf("========================================\n");
        printf("1. Créer une liste vide\n");
        printf("2. Insérer un élément en tête\n");
        printf("3. Insérer un élément en fin\n");
        printf("4. Afficher la liste\n");
        printf("5. Quitter\n");
        printf("========================================\n");
        printf("Entrez votre choix : ");
        scanf("%d", &choix);

        switch (choix) {
            case 1:
                *Dl = NULL;
                printf("Liste créée avec succès !\n");
                break;
            case 2:
                printf("Entrez la valeur à insérer : ");
                scanf("%d", &val);
                *Dl = insert_Head(*Dl, val);
                break;
            case 3:
                printf("Entrez la valeur à insérer : ");
                scanf("%d", &val);
                *Dl = insert_last(*Dl, val);
                break;
            case 4:
                printf("Liste : ");
                afficher_liste(*Dl);
                break;
            case 5:
                printf("Au revoir !\n");
                break;
            default:
                printf("Choix invalide !\n");
        }
    } while (choix != 5);
}
